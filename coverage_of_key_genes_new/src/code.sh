#!/bin/bash
# coverage_of_key_genes 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of bq: '$bq'"
    echo "Value of mq: '$mq'"
    echo "Value of cov: '$cov'"
    echo "Value of gene_list: '$gene_list'"
    echo "Value of ref_genome: '$ref_genome'"
    echo "Value of bam: '$bam'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx-download-all-inputs --parallel


    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.


    #install java
    sudo apt-get update
    sudo apt-get -y install default-jre

    #install bedtools
    #wget https://github.com/arq5x/bedtools2/releases/download/v2.25.0/bedtools-2.25.0.tar.gz
    #tar -zxvf bedtools-2.25.0.tar.gz
    #(cd bedtools2 && make)
    
    # Create sequence dictionary and fai
    mv $ref_genome_path ./
    set +e
    java -Xmx4G -jar picard.jar CreateSequenceDictionary R=$ref_genome_name O=${ref_genome_prefix}.dict

    # Create the reference index
    ./samtools faidx $ref_genome_name

    #index the bam
    #for bam_file in "${bam_path[@]}"; do
        ./samtools index $bam_path
    #done

	sample_prefix=`echo $bam_name |cut -d "." -f 1`
	
    ################################################
    # 1. Run GATK Depth of Coverage
    ################################################

    mkdir coverage

    
    nts=$(grep -c ^processor /proc/cpuinfo)

    #ls ${bam_path[@]} >bam_files.list
    ls $bam_path >bam_files.list
    
    java  -Xmx24G -jar GenomeAnalysisTK.jar \
      -T DepthOfCoverage \
      -mbq "$bq" \
      -mmq "$mq" \
      -L "$gene_list_path" \
      -I  bam_files.list \
      --summaryCoverageThreshold 0 \
      -R "$ref_genome_name" \
      -o coverage/"$bq"bq."$mq"mq.txt
    
     # -nt $nts

    ################################################
    # 2. Turn GATK output text file into a bed file
    ################################################

      awk -v OFS="\t" -v c="$cov" 'NR>1{if($2 >= c){split($1, a, ":"); print a[1],a[2]-1,a[2]}}' coverage/"$bq"bq."$mq"mq.txt  \
      >  coverage/"$bq"bq."$mq"mq.bed

    ################################################
    # 3. Intersect output bed with orig gene list
    ################################################
    words=$(wc -l < coverage/"$bq"bq."$mq"mq.bed)

    if [ $words -eq 0 ];then
         # echo "None of the bases in any of your genes pass your thresholds. Make sure your gene coordinates are correct or try more lenient thresholds."
          #  exit 1
           
          awk -v OFS="\t" '{arr[$4]+=0} END {for (i in arr) {print i, arr[i]}}' $gene_list_path > coverage/"$bq"bq."$mq"mq.genes.sum.bed  

    else
         ./bedtools intersect  \
            -a $gene_list_path \
        -b coverage/"$bq"bq."$mq"mq.bed \
            -wao \
         > coverage/"$bq"bq."$mq"mq.genes.bed


    ################################################
    # 4. Sum By Gene
    ################################################

    awk -v OFS="\t" '{arr[$4]+=$NF} END {for (i in arr) {print i, arr[i]}}' coverage/"$bq"bq."$mq"mq.genes.bed > coverage/"$bq"bq."$mq"mq.genes.sum.bed
    fi

    sort coverage/"$bq"bq."$mq"mq.genes.sum.bed >  coverage/"$bq"bq."$mq"mq.genes.sum.sorted.bed
    awk -v OFS="\t" '{arr[$4]+=$3-$2} END {for (i in arr) {print i,arr[i]}}' $gene_list_path  > coverage/totByGene.bed
    sort coverage/totByGene.bed > coverage/sorted.totByGene.bed
              
    #join -1 1 -2 1 -t $'\t' coverage/"$bq"bq."$mq"mq.genes.sum.sorted.bed coverage/sorted.totByGene.bed > coverage/"$bq"bq."$mq"mq.summary.txt
    perl ./join_list.pl coverage/"$bq"bq."$mq"mq.genes.sum.sorted.bed coverage/sorted.totByGene.bed > coverage/"$bq"bq."$mq"mq.summary.txt
                
                  
    awk -v OFS="\t" 'BEGIN {print "Gene\tnumMissing\tfracMissing"} {tot_fail = $3-$2; frac_fail = tot_fail / $3; print $1,tot_fail,frac_fail }' coverage/"$bq"bq."$mq"mq.summary.txt > coverage/"$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt
    cp coverage/"$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt coverage/"$sample_prefix"."$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt
     
    # Create Missing Gene Coverage Plots in R - output pdf

    #allow error for the R part
    set +e
    #install R packages
    sudo Rscript ./install_packages.R

    #run the Rscript to generate the plot
     Rscript --vanilla ./plot_coverage.R coverage/"$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt $cov $bq $mq


    mkdir -p $HOME/out/output
    mkdir -p $HOME/out/plot
    mkdir -p $HOME/out/summary

    cp *.pdf $HOME/out/plot
    cp -r coverage $HOME/out/output
    cp coverage/"$sample_prefix"."$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt  $HOME/out/summary
    #touch empty
    #cp empty $HOME/out/summary
    
    ls coverage/"$sample_prefix"."$bq"bq."$mq"mq."$cov".cov.coverage_metrics.txt
    ls $HOME/out/summary
    
    dx-upload-all-outputs --parallel



    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    #for i in "${!output[@]}"; do
     #   dx-jobutil-add-output output "${output[$i]}" --class=array:file
    #done
    #dx-jobutil-add-output plot "$plot" --class=file
}
