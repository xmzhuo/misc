#!/usr/bin/env python
# downsample_fastq 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

#Ming 20190213 modify for downsampling to a target size instead of ratio
#modified for pair end downsizing

import os
import dxpy
import multiprocessing as mp
import dx_utils

dx_utils.run_cmd('sudo apt-get install pigz -y')

ratio = float(1)
fn_ID = []
read_ID = []
def downsample(x):
    
    fn = fn_ID[x]
    read = read_ID[x]
    seed = seed_ran
    print fn
    print read
    print seed
    print ratio
    ofn = fn.replace('.fastq.gz', '.{0}_percent.fastq.gz'.format(int(100*ratio)))
    cmd = 'dx cat {0} | gunzip | seqtk sample -s{1} - {2} | pigz | dx upload --brief - --destination {3} '
    cmd = cmd.format(read, seed, ratio, ofn)
    print cmd
    result = dxpy.dxlink(dx_utils.run_cmd(cmd, returnOutput=True))
    print result
    return result

@dxpy.entry_point('main')

def main(read1, read2, size, seed, thread):
    global ratio
    global fn_ID
    global read_ID
    global seed_ran
    seed_ran = seed
    fn1 = dxpy.describe(read1)['name']
    fn2 = dxpy.describe(read2)['name']
    ori_size1 = dxpy.describe(read1)['size']
    ori_size2 = dxpy.describe(read2)['size']
    ori_size = (float(str(ori_size1))+float(str(ori_size2)))/(1024**3)
    ratio = float(size)/float(ori_size)
    print str(size) + " / " + str(ori_size) + "=" + str(ratio)
    fn_ID = [fn1, fn2]
    read1_ID = read1['$dnanexus_link']
    read2_ID = read2['$dnanexus_link']
    read_ID = [read1_ID, read2_ID]   
    print read_ID
    pool = mp.Pool(thread)
    results=[]
    results = [pool.map(downsample, range(2))]
    print results
    print results[0]
    output = {}
    output['read1'] = results[0][0]
    output['read2'] = results[0][1]
    return output

dxpy.run()
